Mi API tiene:

* Archivo index.js:

// PAQUETES. Aquí requiero los módulos que voy a usar en mi proyecto.
const express = require('express');
const morgan = require('morgan');
const path = require('path');
const ejs = require('ejs');
const session = require('express-session');
const validator = require('express-validator');
const passport = require('passport');
const flash = require('connect-flash');
const MySQLStore = require('express-mysql-session')(session); // Creo que tb. podria ser: const { MySQLStore } = require('express-mysql-session');
const bodyParser = require('body-parser');
const expressLayouts = require('express-ejs-layouts');
const cookieParser = require('cookie-parser');
const mysql = require('mysql');


// ROUTES. Aquí requerimos las rutas buscándolas en sus carpetas y más abajo las usamos.
const indexRouter = require('./routes/index');

// INICIALIZACIONES
const app = express();
require('./lib/passport');

// CONFIGURACIONES (settings)
app.set('port', process.env.PORT || 2000);
//Settings de vistas (para que se sepa donde están los archivos .ejs)!!!!!!!
app.set('views', path.join(__dirname, 'views'));
// Configuración adicional de EJS
app.set('view engine', 'ejs');
// Utilizar ejs.renderFile como función de devolución de llamada
app.engine('ejs', ejs.renderFile);


// MIDDLEWARES
app.use(morgan('dev'));
app.use(express.urlencoded({extended: true})); // Para analizar solicitudes con formato de formulario
//false =>solo aceptar nombres o formatos en string. No imágenes o videos
app.use(bodyParser.json());
app.use(cookieParser('isramysqlnodemysql'))

// Configurar MySQLStore para almacenar la sesión en la base de datos. Flash utilizará esta sesión (ver Global variables)
const { database } = require('./keys.js');

const pool = mysql.createPool(database);

// SESION
app.use(session({
  secret: 'isramysqlnode',
  resave: false,
  saveUninitialized: false,
  store: new MySQLStore(database) //aqui se configura donde se guarda la sesion en mi base de datos por ello el paquete: importar MySQLStore (ver archivo readme)
}));
app.use(flash()); //Módulo flash para enviar mensajes al usuario (cliente en el navegador)
app.use(passport.initialize());
app.use(passport.session());
app.use(validator());

// Variables globales son utilizadas a través de passport (aquí lee de la base de datos)
app.use((req, res, next) => {
  app.locals.message = req.flash('message'); //message da los mensajes de error (ver en passport.js)
  app.locals.success = req.flash('success');
  app.locals.user = req.user; //ver readme//ver profile.ejs en views
  next();
});

// RUTAS. Aquí usamos las rutas buscándolas en sus carpetas
app.use(indexRouter);
app.use(require('./routes/authentication'));
//app.use('/links', require('./routes/links')); //Este se eliminará!!!!!!!!!!!!!!!!
app.use(require('./routes/comunidad'));

// Ruta para archivos estáticos en la carpeta PUBLIC (css/styles.css)
app.use(express.static(path.join(__dirname, 'public')));

// Starting
app.listen(app.get('port'), () => {
  console.log('Server is in port', app.get('port'));
});










-------------------------------------------------------------------------------------

* Archivo main.css dentro de la carpeta css, dentro de la carpeta public:

/*  Footer abajo  */

.wrapper {
  min-height: 100%;  
}


/*  Body  */


html, body {
  height: 100%;
}

body {
  background: rgba(21, 22, 23, 0.1);
  color: white;
}

/*  Navbar  */

.iconoMeetup {
  width: 50px;
}

.imgDesarrollador {
  width: 30px;  
}

.linkDesarrollador {
  margin-top: 5px;
}

/*  Main  */

/*  Container1  */

.text-custom {
  color: rgb(146, 5, 5);
  font-size: 30px;
}

.custom-margin {
  margin-right: 20px;
}

.container1 {
  padding-top: 120px;
}

/*  Container2  */

.text-custom1 {
  color: rgba(23, 2, 12, 0.7);
}

.container2 p {
  margin-left: 10px;
}

.container2 {
  padding-top: 120px;
  padding-bottom: 120px;
}

.imgGenteDivirtiéndose {
  width: 200px;
}

.imgPartituras {
  width: 200px;
}

/*  PROFILE  */

.backgroundProfile {
  position: relative;
  min-height: 100vh;
}

.backgroundProfile::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url('/img/fotoGuitar1.jpg');
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center top;
  opacity: 0.5; /* Cambia el valor de opacidad según sea necesario */
}

.container.p-4 {
  position: relative;
  z-index: 1;
}

.btnUneteComunidad {
  background-color: rgb(146, 5, 5);
  color: white;
}

/*  COMUNIDAD  */

/* Boton ocupe ancho formulario */

.stretch-width {
  width: 100%;
}









-------------------------------------------------------------------------------------

* Archivo keys.js:

module.exports = {

    database: {
        connectionLimit: 10,
        host: 'localhost',
        user: 'root',
        password: '',
        database: 'db_links'
    }

};









-------------------------------------------------------------------------------------

* Archivo database.js:

const mysql = require('mysql');
const { promisify }= require('util');

const { database } = require('./keys');

const pool = mysql.createPool(database);

pool.getConnection((err, connection) => {
  if (err) {
    if (err.code === 'PROTOCOL_CONNECTION_LOST') {
      console.error('Database connection was closed.');
    }
    if (err.code === 'ER_CON_COUNT_ERROR') {
      console.error('Database has to many connections');
    }
    if (err.code === 'ECONNREFUSED') {
      console.error('Database connection was refused');
    }
  }

  if (connection) connection.release();
  console.log('DB is Connected');

  return;
});

// Promisify Pool Querys
pool.query = promisify(pool.query);

module.exports = pool;









----------------------------------------------------------------------------------

* En la carpeta lib archivo auth.js:

// Usuario registrado 'isLoddedIn' que indica si el usuario está registrado

module.exports = {
    isLoggedIn (req, res, next) {
        if (req.isAuthenticated()) {
            return next();
        }
        return res.redirect('/signin');
    }
};







---------------------------------------------------------------------------------

* En la carpeta lib archivo helpers.js:

// Aquí encripto la contraseña:

const bcrypt = require('bcryptjs');

const helpers = {};

helpers.encryptPassword = async (password) => {
  const salt = await bcrypt.genSalt(10);
  const hash = await bcrypt.hash(password, salt);
  return hash;
};

helpers.matchPassword = async (password, savedPassword) => {
  try {
    console.log('password:', password);
    console.log('savedPassword:', savedPassword);
    return await bcrypt.compare(password, savedPassword);
  } catch (e) {
    console.log(e);
  }
};

module.exports = helpers;








----------------------------------------------------------------------------------

* En la carpeta lib archivo passport.js: 

const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

const pool = require('../database');
const helpers = require('./helpers');

passport.use('local.signin', new LocalStrategy({
  usernameField: 'username',
  passwordField: 'password',
  passReqToCallback: true
}, async (req, username, password, done) => {
  const rows = await pool.query('SELECT * FROM users WHERE username = ?', [username]);
  if (rows.length > 0) {
    const user = rows[0];
    const validPassword = await helpers.matchPassword(password, user.password)
    if (validPassword) {
      done(null, user, req.flash('success', 'Welcome ' + user.username));
    } else {
      done(null, false, req.flash('message', 'Incorrect Password'));
    }
  } else {
    return done(null, false, req.flash('message', 'The Username does not exist.'));
  }
}));



passport.use('local.signup', new LocalStrategy({
  usernameField: 'username',
  passwordField: 'password',
  passReqToCallback: true
}, async (req, username, password, done) => {
  const { fullname } = req.body;

  // Verificar si el nombre de usuario ya existe en la base de datos
  const existingUser = await pool.query('SELECT * FROM users WHERE username = ?', [username]);
  if (existingUser.length > 0) {
    return done(null, false, req.flash('message', 'El usuario ya existe.'));
  }

  let newUser = {
    fullname,
    username,
    password
  };
  newUser.password = await helpers.encryptPassword(password);

  // Guardar en la base de datos
  const result = await pool.query('INSERT INTO users SET ?', newUser);
  newUser.id = result.insertId;

  return done(null, newUser);
}));



passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  const rows = await pool.query('SELECT * FROM users WHERE id = ?', [id]);
  done(null, rows[0]);
});

 








----------------------------------------------------------------------------------

* En la carpeta routes archivo authentication.js:

const express = require('express');
const router = express.Router();
const passport = require('passport');

const pool = require('../database');
const { isLoggedIn } = require('../lib/auth'); //Si no estás logueado te devuelve al formulario de logueo.


// SIGNUP (registrarse)
router.get('/signup', (req, res) => {
  res.render('auth/signup', {title: 'registrate', showProfileLink: true,});   
});

// SIGNUP (registrarse)
router.get('/signup', (req, res) => {
  res.render('auth/signup', { title: 'registrate', showProfileLink: true });
});

router.post('/signup', passport.authenticate('local.signup', {
  successRedirect: '/comunidad', // Redirige a la página de comunidad después de registrarse
  failureRedirect: '/signup',
  failureFlash: true
}));

// SIGNIN (iniciar sesion) 
router.get('/signin', (req, res) => {
  res.render('auth/signin', {title: 'loguearse', showProfileLink: true});
});

//  => esta ruta, una vez el usuario está logueado, se va a: views/profile.ejs
router.post('/signin', (req, res, next) => {
  req.check('username', 'Username is Required').notEmpty();
  req.check('password', 'Password is Required').notEmpty();
  const errors = req.validationErrors();
  if (errors.length > 0) {
    req.flash('message', errors[0].msg);
    res.redirect('/signin');
  }
  passport.authenticate('local.signin', {
    successRedirect: '/profile',
    failureRedirect: '/signin',
    failureFlash: true
  })(req, res, next);
});

// LOGOUT (finalizar sesion)
router.get('/logout', (req, res) => {
  req.logOut(); //Passport proporciona este método.
  res.redirect('/');
});

/* 
// PROFILE => irá a views/profile.ejs y éste lo enviará a routes/comunidad.js para de ahí redireccionarlo a la página de la página de la comunidad.
router.get('/profile', isLoggedIn, (req, res) => {
  res.render('profile', {title: 'Profile', username: req.user.username, showProfileLink: true});
});
 */



router.get('/profile', isLoggedIn, async (req, res) => {
  // Verificar si el usuario está autenticado
  if (req.isAuthenticated()) {
    const { username } = req.user;
    try {
      // Bandera formulario_completado en DB
      const existingUser = await pool.query('SELECT formulario_completado FROM users WHERE username = ?', [username]);

      if (existingUser.length > 0 && existingUser[0].formulario_completado) {
        res.render('profile', { title: 'Profile', username: req.user.username, showProfileLink: true, showCard: false });
      } else {
        res.render('profile', { title: 'Profile', username: req.user.username, showProfileLink: true, showCard: true });
      }
    } catch (error) {
      console.log(error);
      req.flash('message', 'Ocurrió un error al cargar la página.');
      return res.redirect('/profile');
    }
  } else {
    res.redirect('/signin'); // Redirigir al formulario de inicio de sesión si el usuario no está autenticado
  }
});


module.exports = router;




----------------------------------------------------------------------------------

* En la carpeta routes archivo index.js:

const express = require('express');
const router = express.Router();

const { isLoggedIn } = require('../lib/auth');


// RUTA HOME
router.get('/', (req, res) => {
  // res.render('main', {title: 'Meetup Guitar'}); 
  // Comprobar si el usuario está autenticado
  if (req.isAuthenticated()) {
    // Mostrar el enlace al perfil si el usuario está autenticado
    res.render('main', { title: 'Meetup Guitar', navigation: '/partials/navigation', showProfileLink: true });
  } else {
    // No mostrar el enlace al perfil si el usuario no está autenticado
    res.render('main', { title: 'Meetup Guitar', navigation: '/partials/navigation', showProfileLink: false });
  }
});


// Ruta para mi página de desarrollador
router.get('/portafolioIndexIsra', (req, res) => {
  res.render('portafolioIndexIsra', { title: 'pagina contacto' })
})


module.exports = router;





----------------------------------------------------------------------------------

* En la carpeta routes archivo comunidad.js:

const express = require('express');
const router = express.Router();

const pool = require('../database');
const { isLoggedIn } = require('../lib/auth');

const passport = require('passport');


/*  
// Ruta 'comunidad' => esta ruta comprueba que el usuario está logueado y se va a: views/profile.ejs
// Después que views/profile clique en 'unirse' accederá a la ruta 'comunidad':
router.get('/comunidad', isLoggedIn, (req, res) => {
  res.render('comunidad/comunidad', { title: 'Comunidad meetup Guitar', showForm: true}); //variable showForm para indicar que se debe mostrar el formulario (ver comFormularioMatch.ejs)
});
 */ 



router.get('/comunidad', isLoggedIn, async (req, res) => {
  const { username } = req.user;

  try {
    //Bandera formulario_completado en DB
    const existingUser = await pool.query('SELECT formulario_completado FROM users WHERE username = ?', [username]);

    if (existingUser.length > 0 && existingUser[0].formulario_completado) {
      res.render('comunidad/comunidad', { title: 'Comunidad meetup Guitar', showForm: false, showCard: false });
    } else {
      res.render('comunidad/comunidad', { title: 'Comunidad meetup Guitar', showForm: true, showCard: true });
    }
  } catch (error) {
    console.log(error);
    req.flash('message', 'Ocurrió un error al cargar la página.');
    res.redirect('/comunidad');
  }
});



 
// Al enviar el formulario comFormularioMatch, el usuario se quedará en comunidad.
router.post('/comunidad', isLoggedIn, async (req, res) => {
  const { age, gender, level, availability } = req.body;
  const { username } = req.user;

  try {
    const existingUser = await pool.query('SELECT * FROM users WHERE username = ?', [username]);

    if (existingUser.length > 0) {
      const updatedUser = {
        age,
        gender,
        level,
        availability,
        formulario_completado: true
      };

      await pool.query('UPDATE users SET ? WHERE username = ?', [updatedUser, username]);

      res.redirect('/comunidad'); // Redirige a la misma ruta (/comunidad) después de enviar el formulario
    } else {
      req.flash('message', 'El usuario no existe.');
      res.redirect('/comunidad'); // Redirige a la misma ruta (/comunidad) en caso de error
    }
  } catch (error) {
    console.log(error);
    req.flash('message', 'Ocurrió un error al procesar el formulario.');
    res.redirect('/comunidad'); // Redirige a la misma ruta (/comunidad) en caso de error
  }
});


module.exports = router;




----------------------------------------------------------------------------------

* En la carpeta views archivo main.ejs:

<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title><%= title %></title>
   <%- include('partials/head') %>
</head>

<!--  Para footer abajo -->
<div class="wrapper"> 


<body>

  <%- include('partials/navigation') %>

<!--  MAIN CONTENT -->

<!--  Container1 -->
<div class="container1 d-flex justify-content-center align-items-center">
  <div class="d-flex flex-row justify-content-center align-items-center row">    
    <h1 class="text-center text-uppercase fw-bold custom-margin text-custom col-sm-4 col-md-4">Tu plataforma de guitarra</h1>
    <img src="/img/fotoGuitar1.jpg" alt="fotoGuitar1" class="w-50 col-sm-8 col-md-8">    
  </div>
</div>

<!--  Container2 -->
<div class="container2 d-flex justify-content-around align-items-center mx-auto">
  <div class="row justify-content-between">
    <div class="pb-2 col-sm-12 col-md-4 mb-4">
      <p class="text-center text-custom1">Aquí podrás encontrar gente con quien compartir tu afición por la guitarra. Desde principiantes a avanzados. No dudes en registrarte y <span class="text-danger">¡disfruta!</span></p>
    </div>

    <div class="pb-4 col-sm-12 col-md-4 d-flex flex-column justify-content-center align-items-center mb-4">
      <img src="/img/genteDivirtiéndose.jpg" alt="genteDivirtiéndose" class="imgGenteDivirtiéndose">
      <a href="#" class="mt-2 btn btn-secondary">Social</a>
    </div>

    <div class="pb-4 col-sm-12 col-md-4 d-flex flex-column justify-content-center align-items-center mb-4">
      <img src="/img/partituras.jpg" alt="partituras" class="imgPartituras">
      <a href="#" class="mt-2 btn btn-secondary">Docs</a>
    </div>
  </div>
</div>




</div> <!-- Fin de footer abajo -->

  <%- include('partials/footer') %>

</body>
</html>








----------------------------------------------------------------------------------


* En la carpeta views archivo profile.ejs:

<!-- Este muestra la información del usuario autenticado, incluyendo su nombre de usuario. -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <%- include('partials/head') %>
</head>
<body>

<!--  Para footer abajo -->
<div class="wrapper"> 

<body>
    
<%- include('partials/navigation') %>


<% if (showCard) { %>

<div class="backgroundProfile">
  <div class="container p-4">
      <div class="row">
        <div class="col-md-8 mx-auto mt-4">
          <div class="card text-center">
            <div class="card-header">
              <h3>Bienvenido <%= username %></h3>
            </div>
            <img src="/img/iconoMeetup.png" alt="Logo meetup" class="card-img-top mx-auto m-2 w-50">
            <div class="card-body">
              <form action="/comunidad" method="GET">              
                <div class="form-group">
                  <button class="btn btnUneteComunidad btn-block">
                    ¡Únete a la comunidad!
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <% } %>



</div> <!-- Fin de footer abajo -->
  
<%- include('partials/footer') %>


</body>
</html>











----------------------------------------------------------------------------------


* En la carpeta views, la carpeta auth con el archivo signin.ejs:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <%- include('../partials/head') %>
</head>
<body>

<!--  Para footer abajo -->
<div class="wrapper"> 

<%- include('../partials/navigation') %>


<div class="container p-4">
  <div class="row">
    <div class="col-md-4 mx-auto">
      <div class="card text-center">
        <div class="card-header">
          <h3>Iniciar sesión</h3>
        </div>
        <img src="/img/iconoMeetup.png" alt="Logo meetup" class="card-img-top mx-auto m-2 w-50">
        <div class="card-body">
          <form action="/signin" method="POST">
            <div class="form-group">
              <input type="text" name="username" placeholder="Username" class="form-control mb-3" autofocus>
            </div>
            <div class="form-group">
              <input type="password" name="password" placeholder="Password" class="form-control mb-3">
            </div>
            <div class="form-group">
              <button class="btn btn-secondary btn-block">
                Iniciar sesion
              </button>
            </div>      
          </form>
        </div>
      </div>
    </div>
  </div>
</div>


</div> <!-- Fin de footer abajo -->
  
<%- include('../partials/footer') %>

</body>
</html>







----------------------------------------------------------------------------------


* En la carpeta views, la carpeta auth con el archivo signup.ejs:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <%- include('../partials/head') %>
</head>
<body>

<!--  Para footer abajo -->
<div class="wrapper"> 

    <%- include('../partials/navigation') %>

<div class="container p-4">
  <div class="row">
    <div class="col-md-4 mx-auto">
      <div class="card text-center">
        <div class="card-header">
          <h3>Registrarse</h3>
        </div>
        <img src="/img/iconoMeetup.png" alt="Logo meetup" class="card-img-top mx-auto m-2 w-50">
        <div class="card-body">
          <form action="/signup" method="POST">
            <div class="form-group">
              <input type="text" name="fullname" placeholder="Full Name" class="form-control mb-3" autofocus>
            </div>
            <div class="form-group">
              <input type="text" name="username" placeholder="Username" class="form-control mb-3">
            </div>
            <div class="form-group">
              <input type="text" name="email" placeholder="email" class="form-control mb-3">
            </div>
            <div class="form-group">
              <input type="password" name="password" placeholder="Password" class="form-control mb-3">
            </div>
            <div class="form-group">
              <button class="btn btn-secondary btn-block">
                Registrarse
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>


</div> <!-- Fin de footer abajo -->
  
<%- include('../partials/footer') %>


</body>
</html>











----------------------------------------------------------------------------------

* En la carpeta views, la carpeta comunidad con el arvhivo comunidad.ejs:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <%- include('../partials/head') %>      
    
</head>
<body>

<!-- Para footer abajo -->
<div class="wrapper"> 

  <%- include('comNavigation') %>

  <%- include('comFormularioMatch') %>
    

</div> <!-- Fin de footer abajo -->

<%- include('../partials/footer') %>

</body>
</html>







----------------------------------------------------------------------------------

* En la carpeta views, la carpeta links con el archivo comFormularioMatch.ejs:



<!-- Formulario para match -->
<div class="container text-custom">
  <div class="row">
    <div class="col-6">
      <form class="needs-validation" novalidate id="matchForm" action="/comunidad" method="POST">
        <!-- contenido del formulario -->
        <div class="mt-3">
          <label for="age" class="form-label">Edad</label>
          <input type="number" class="form-control" id="age" name="age" required>
        </div>
        <div class="mb-3">
          <label class="form-label">Género</label>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="gender" id="genderMale" value="male" required>
            <label class="form-check-label" for="genderMale">Masculino</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="gender" id="genderFemale" value="female">
            <label class="form-check-label" for="genderFemale">Femenino</label>
          </div>
        </div>
        <div class="mb-3">
          <label for="level" class="form-label">Nivel de guitarra</label>
          <select class="form-select" id="level" name="level" required>
            <option value="">Seleccionar nivel</option>
            <option value="beginner">Principiante</option>
            <option value="intermediate">Medio</option>
            <option value="advanced">Avanzado</option>
          </select>
        </div>
        <div class="mb-3">
          <label for="availability" class="form-label">Disponibilidad</label>
          <textarea class="form-control" id="availability" name="availability" rows="3" style="resize: none;" required></textarea>
        </div>
        <button type="submit" class="btn btn-secondary stretch-width mb-3">Enviar</button>
      </form>
    </div>
    <div class="col-6 mt-3 mb-3">
      <img src="img/chicaGuitarraAlapiz.jpg" class="img-fluid" alt="chicaGuitarra">
    </div>
  </div>
</div>



<!-- Para redirigir al usuario a la comunidad después de enviar el formulario. El siguiente script pendiente de ponerlo en lib/ejs.ejs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
<style>
  #matchForm {
    display: block; /* Muestra el formulario inicialmente */
  }  
</style>




<script>
  document.getElementById('matchForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Evita que se realice la acción de envío del formulario

    alert("¡El formulario se ha enviado correctamente!");

    // Oculta el formulario y muestra la vista de la comunidad
    document.getElementById('matchForm').style.display = 'none';
  });
</script>










 

----------------------------------------------------------------------------------

* En la carpeta views, la carpeta links con el archivo comNavigation.ejs:

<!-- Navigation Meetup Guitar / Comunidad -->

  <nav class="navbar navbar-expand-lg bg-dark navbar-dark">
    <div class="container-fluid">
      <div class="navLeft">
        <a class="navbar-brand" href="/">Meetup Guitar <span><img src="/img/iconoMeetup.png" alt="iconoMeetup" class="iconoMeetup"></span></a>      
      </div>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav ms-auto d-flex align-items-center">        
          <a class="nav-link" href="/">Home</a>
          <a class="nav-link active" href="/comunidad">Perfil</a>          
          <a class="nav-link" href="/logout">Finalizar Sesion</a>
          <a class="nav-link linkDesarrollador" href="/portafolioIndexIsra">Desarrollador <span><img src="/img/iconoIsra.gif" alt="iconoIsra" class="imgDesarrollador"></span></a>        
        </div>
      </div>
    </div>
  </nav>
  
  
  
    

















----------------------------------------------------------------------------------

* En la carpeta views, la carpeta partials con el archivo footer.ejs:

<footer class="bg-dark text-center p-2">
    <div class="derechos-de-autor">Creado por Israel Fabra (2023) &#169;</div>
  </footer>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
----------------------------------------------------------------------------------

* En la carpeta views, la carpeta partials con el archivo message.ejs:

<%- include('../layouts/main') %>


<% if (message) { %>
    <div class="container p-4">
        <div class="row">
            <div class="col-md-4 mx-auto">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= message %>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
<% } %>

<% if (success) { %>
    <div class="container p-4">
        <div class="row">
            <div class="col-md-4 mx-auto">
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <%= success %>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
<% } %>











----------------------------------------------------------------------------------

* En la carpeta views, la carpeta partials con el archivo navigation.ejs:

<!-- Nav Meetup Guitar -->
<nav class="navbar navbar-expand-md bg-dark navbar-dark">
  <div class="container-fluid">
    <div class="navLeft">
      <a class="navbar-brand" href="/">Meetup Guitar <span><img src="/img/iconoMeetup.png" alt="iconoMeetup" class="iconoMeetup"></span></a>      
    </div>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
      <div class="navbar-nav ms-auto d-flex align-items-center">        
        <a class="nav-link" href="/">Home</a>


        <% if (!showProfileLink) { %>
        <a class="nav-link" href="/signup">Registrarse</a>
        <% } %>


        

        <% if (!showProfileLink) { %>
        <a class="nav-link" href="/signin">Iniciar Sesion</a>
        <% } %>



     

        <% if (showProfileLink) { %>
          <a class="nav-link active" href="/profile">Perfil</a>
        <% } %>
 



        <% if (showProfileLink) { %>
        <a class="nav-link" href="/logout">Finalizar Sesion</a> 
        <% } %>



        <a class="nav-link linkDesarrollador" href="/portafolioIndexIsra">Desarrollador <span><img src="/img/iconoIsra.gif" alt="iconoIsra" class="imgDesarrollador"></span></a>        
      </div>
    </div>
  </div>
</nav>










----------------------------------------------------------------------------------

* En la carpeta views, la carpeta partials con el archivo head.ejs:


<!-- Bootstrap5 -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">

<!-- CUSTOM CSS -->
<link rel="stylesheet" href="/css/main.css">






----------------------------------------------------------------------------------

* En la carpeta views, la carpeta partials con el archivo message.ejs:


<!-- este código permite mostrar mensajes de error y éxito en forma de alertas en la página web. Dependiendo de las variables "message" y "success" proporcionadas, se renderizarán las alertas correspondientes. Usando Flash.
 -->

<% if (message) { %>
    <div class="container p-4">
        <div class="row">
            <div class="col-md-4 mx-auto">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= message %>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
<% } %>

<% if (success) { %>
    <div class="container p-4">
        <div class="row">
            <div class="col-md-4 mx-auto">
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <%= success %>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
<% } %>









----------------------------------------------------------------------------

* Mi base de datos es:

DROP SCHEMA IF EXISTS db_links;
CREATE DATABASE db_links;

USE db_links;


-- USERS TABLE
CREATE TABLE users(
  id INT(11) NOT NULL,
  username VARCHAR(16) NOT NULL,
  password VARCHAR(60) NOT NULL,
  fullname VARCHAR(100) NOT NULL
);

ALTER TABLE users 
  MODIFY password VARCHAR(255) NOT NULL;

ALTER TABLE users 
  ADD PRIMARY KEY (id);

ALTER TABLE users
  MODIFY id INT(11) NOT NULL AUTO_INCREMENT;

-- Del formulario comFormularioMatch
ALTER TABLE users ADD age INT(3) NOT NULL;
ALTER TABLE users ADD gender ENUM('masculino', 'femenino') NULL;
ALTER TABLE users ADD level ENUM('principiante', 'medio', 'avanzado') NULL;
ALTER TABLE users ADD availability TEXT;
ALTER TABLE users MODIFY COLUMN level ENUM('principiante', 'medio', 'avanzado') NULL;
ALTER TABLE users ADD formulario_completado BOOLEAN DEFAULT FALSE;




DESCRIBE users;
SELECT * FROM users;


-- LINKS TABLE
CREATE TABLE links(
  id INT(11) NOT NULL,
  title VARCHAR(150) NOT NULL,
  url VARCHAR(255),
  description TEXT,
  user_id INT(11),
  created_at timestamp NOT NULL DEFAULT current_timestamp,
  CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id)
);

ALTER TABLE links
  ADD PRIMARY KEY (id);

ALTER TABLE links
  MODIFY id INT(11) NOT NULL AUTO_INCREMENT;
  
  
DESCRIBE links;
SELECT * FROM links;

-- ----------------------

show tables;
select * from sessions;







----------------------------------------------------------------------------------










